"""
Arquivo: analise_exploratoria_modelo.py

Autor:
    Nome: Gabriel Maciel Figueiredo Constantino da Silva
    E-mail: 10419291@mackenzista.com.br
    RA: 10419291

Síntese:
    Este script realiza a análise exploratória e modelagem preditiva com base
    no dataset 'student-mat.csv', utilizando algoritmos de classificação supervisionada.
    As etapas incluem:
    - Leitura do dataset e criação da variável alvo binária
    - Análise exploratória visual (distribuição e correlação)
    - Pré-processamento: codificação de variáveis categóricas
    - Treinamento e avaliação de um modelo Random Forest
    - Visualização da importância das variáveis no modelo

Histórico de Atualizações:
    - 30/03/2025 | Gabriel Maciel Figueiredo Constantino da Silva | Criação do script com análise exploratória e modelo
    - 31/03/2025 | Gabriel Maciel Figueiredo Constantino da Silva | Inclusão de gráficos, métricas e cabeçalho completo

Versão: 1.0
"""

# Importações
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score

# Carregamento da base de dados
df = pd.read_csv("student-mat.csv", sep=';')

# Criação da variável alvo binária: aprovado (1) ou reprovado (0)
df['pass'] = df['G3'].apply(lambda x: 1 if x >= 10 else 0)

# Exibição inicial
print("Visualização inicial dos dados:")
print(df.head())

# Análise exploratória - distribuição de aprovados/reprovados
sns.countplot(x='pass', data=df)
plt.title('Distribuição de Aprovação (1 = Aprovado, 0 = Reprovado)')
plt.show()

# Correlação entre variáveis numéricas
plt.figure(figsize=(12, 8))
sns.heatmap(df.corr(numeric_only=True), annot=True, cmap='coolwarm')
plt.title("Mapa de Correlação entre Variáveis Numéricas")
plt.show()

# Seleção de variáveis
X = df.drop(columns=['G1', 'G2', 'G3', 'pass'])  # Evita vazamento de informação
y = df['pass']

# Codificação das variáveis categóricas
for col in X.select_dtypes(include='object').columns:
    X[col] = LabelEncoder().fit_transform(X[col])

# Divisão treino/teste
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Criação e treinamento do modelo
model = RandomForestClassifier(random_state=42)
model.fit(X_train, y_train)

# Predições
y_pred = model.predict(X_test)

# Avaliação
print("Matriz de Confusão:")
print(confusion_matrix(y_test, y_pred))

print("\nRelatório de Classificação:")
print(classification_report(y_test, y_pred))

print("Acurácia geral:", accuracy_score(y_test, y_pred))

# Visualização da importância das variáveis
importances = pd.Series(model.feature_importances_, index=X.columns)
importances.sort_values(ascending=True).plot(kind='barh', figsize=(10, 8))
plt.title("Importância das Variáveis no Modelo Random Forest")
plt.xlabel("Score")
plt.tight_layout()
plt.show()
